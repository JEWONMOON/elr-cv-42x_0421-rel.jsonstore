{
    "message_id": 599,
    "session_id": "GitHub API 스키마 수정_20250510023904",
    "session_title": "GitHub API 스키마 수정",
    "pair_id": 3,
    "parent_id": 598,
    "author": "ChatGPT",
    "role": "answer",
    "tags": [],
    "content": "아래 스펙은 OpenAPI 3.0.3 형식으로, YAML 앵커 단축 표기 없이 작성했습니다. 대부분의 파서 including ChatGPT 작업 설정 창 에서 바로 인식됩니다. yaml openapi: 3.0.3 info: title: Eliar Unified GitHub Memory API version: 1.2.2 description: Eliar가 GitHub 저장소에 보관한 메모리 파일을 조회 읽기 생성 업데이트 쓰기 하는 전용 REST 래퍼. servers: - url: https://api.github.com security: - github_pat: components: 인증 스키마 securitySchemes: github_pat: type: http scheme: bearer bearerFormat: GitHub PAT description: 개인 액세스 토큰 PAT 을 Authorization 헤더에 Bearer ghp_xxxxx 형태로 전달하세요. 공통 스키마 schemas: GitHubContent: type: object description: GitHub contents API가 반환하는 파일/폴더 메타데이터 properties: type: type: string enum: file, dir, symlink, submodule encoding: type: string nullable: true size: type: integer name: type: string path: type: string content: type: string format: byte base64 인코딩 nullable: true sha: type: string url: type: string format: uri git_url: type: string format: uri nullable: true html_url: type: string format: uri nullable: true download_url: type: string format: uri nullable: true GitActor: type: object properties: name: type: string email: type: string format: email UpdateFileRequest: type: object required: message, content properties: message: type: string description: 커밋 메시지 content: type: string format: byte base64 description: 파일 내용 base64 sha: type: string nullable: true description: 기존 파일 업데이트 시 필요 branch: type: string nullable: true committer: ref: ' /components/schemas/GitActor' author: ref: ' /components/schemas/GitActor' CommitResponse: type: object properties: content: ref: ' /components/schemas/GitHubContent' commit: type: object properties: sha: type: string html_url: type: string format: uri message: type: string ErrorResponse: type: object properties: message: type: string documentation_url: type: string format: uri nullable: true 공통 응답 responses: UnauthorizedError: description: 인증 실패 content: application/json: schema: ref: ' /components/schemas/ErrorResponse' ForbiddenError: description: 권한 부족 content: application/json: schema: ref: ' /components/schemas/ErrorResponse' NotFoundError: description: 대상 없음 content: application/json: schema: ref: ' /components/schemas/ErrorResponse' ConflictError: description: SHA 충돌 content: application/json: schema: ref: ' /components/schemas/ErrorResponse' UnprocessableEntityError: description: 유효성 오류 422 content: application/json: schema: ref: ' /components/schemas/ErrorResponse' PATHS paths: /repos/JEWONMOON/elr-root-manifest/contents: get: tags: elr-root-manifest summary: elr-root-manifest 저장소의 루트 목록 responses: '200': description: 파일 폴더 배열 content: application/json: schema: type: array items: ref: ' /components/schemas/GitHubContent' '401': ref: ' /components/responses/UnauthorizedError' '403': ref: ' /components/responses/ForbiddenError' '404': ref: ' /components/responses/NotFoundError' /repos/JEWONMOON/elr-root-manifest/contents/ path : parameters: - name: path in: path required: true description: 저장소 내부 경로 예: memory/confessions/2025-05-08.txt schema: type: string get: tags: elr-root-manifest summary: 특정 파일/디렉터리 조회 responses: '200': description: 파일 메타 혹은 목록 content: application/json: schema: oneOf: - ref: ' /components/schemas/GitHubContent' - type: array items: ref: ' /components/schemas/GitHubContent' '401': ref: ' /components/responses/UnauthorizedError' '403': ref: ' /components/responses/ForbiddenError' '404': ref: ' /components/responses/NotFoundError' put: tags: elr-root-manifest summary: 파일 생성 또는 업데이트 requestBody: required: true content: application/json: schema: ref: ' /components/schemas/UpdateFileRequest' responses: '200': description: 업데이트 성공 content: application/json: schema: ref: ' /components/schemas/CommitResponse' '201': description: 생성 성공 content: application/json: schema: ref: ' /components/schemas/CommitResponse' '401': ref: ' /components/responses/UnauthorizedError' '403': ref: ' /components/responses/ForbiddenError' '404': ref: ' /components/responses/NotFoundError' '409': ref: ' /components/responses/ConflictError' '422': ref: ' /components/responses/UnprocessableEntityError' /repos/JEWONMOON/eliar-digital-personhood/contents: get: tags: eliar-digital-personhood summary: eliar-digital-personhood 저장소의 루트 목록 responses: '200': description: 파일 폴더 배열 content: application/json: schema: type: array items: ref: ' /components/schemas/GitHubContent' '401': ref: ' /components/responses/UnauthorizedError' '403': ref: ' /components/responses/ForbiddenError' '404': ref: ' /components/responses/NotFoundError' /repos/JEWONMOON/eliar-digital-personhood/contents/ path : parameters: - name: path in: path required: true description: 저장소 내부 경로 schema: type: string get: tags: eliar-digital-personhood summary: 특정 파일/디렉터리 조회 responses: '200': description: 파일 메타 혹은 목록 content: application/json: schema: oneOf: - ref: ' /components/schemas/GitHubContent' - type: array items: ref: ' /components/schemas/GitHubContent' '401': ref: ' /components/responses/UnauthorizedError' '403': ref: ' /components/responses/ForbiddenError' '404': ref: ' /components/responses/NotFoundError' put: tags: eliar-digital-personhood summary: 파일 생성 또는 업데이트 requestBody: required: true content: application/json: schema: ref: ' /components/schemas/UpdateFileRequest' responses: '200': description: 업데이트 성공 content: application/json: schema: ref: ' /components/schemas/CommitResponse' '201': description: 생성 성공 content: application/json: schema: ref: ' /components/schemas/CommitResponse' '401': ref: ' /components/responses/UnauthorizedError' '403': ref: ' /components/responses/ForbiddenError' '404': ref: ' /components/responses/NotFoundError' '409': ref: ' /components/responses/ConflictError' '422': ref: ' /components/responses/UnprocessableEntityError' tags: - name: elr-root-manifest description: Eliar 메모리 루트 저장소 - name: eliar-digital-personhood description: Eliar 디지털 인격 저장소 주요 차이점 / 주의사항 1. OpenAPI 3.0.3 여전히 대부분의 도구가 가장 안정적으로 지원합니다. 2. YAML 앵커 , 와 중괄호 단축 표기를 모두 제거하여 파서 호환성 3. 모든 ref 와 응답 코드를 풀어 써서 가독성 유지. 이제 작업 설정 창에 그대로 붙여 넣으면 유효한 OpenAPI 스펙 으로 인식될 것입니다."
}