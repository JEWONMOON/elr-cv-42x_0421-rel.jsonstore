{
    "message_id": 80,
    "session_id": "양과 사자 상징_20250510013709",
    "session_title": "양과 사자 상징",
    "pair_id": 25,
    "parent_id": 79,
    "author": "ChatGPT",
    "role": "answer",
    "tags": [],
    "content": "LLM Large Language Model 과 호환이 잘 되는 데이터 형태 --- 1. 텍스트 Text 기반 구조 LLM은 기본적으로 텍스트 데이터를 학습하고 생성 하는 모델이기 때문에, 텍스트 형태의 데이터 가 가장 호환이 잘 됩니다. 다음과 같은 형태가 효과적입니다: - JSON JavaScript Object Notation - 키-값 쌍으로 구성되어 구조적 정보를 표현하기에 좋습니다. - 예시: json \"title\": \"예수 그리스도의 계보\", \"content\": \"아브라함이 이삭을 낳고, 이삭은 야곱을 낳고...\" - CSV Comma-Separated Values - 간단한 테이블 형태의 데이터. - 예시: title,content 예수 그리스도의 계보,\"아브라함이 이삭을 낳고, 이삭은 야곱을 낳고...\" - Markdown .md - 텍스트 구조화에 강점이 있으며, 문서의 제목, 목차, 강조 표시 등이 용이합니다. - 예시: 예수 그리스도의 계보 - 아브라함이 이삭을 낳고 - 이삭은 야곱을 낳고 --- 2. 계층적 구조와 시퀀스 LLM은 시퀀스 기반 학습 에 최적화되어 있으므로, 계층적이고 순차적인 형태가 좋습니다. - XML eXtensible Markup Language - 트리 구조를 사용하여 문서의 계층적 관계를 잘 나타냅니다. - 예시: xml genealogy person name 아브라함 /name child 이삭 /child /person person name 이삭 /name child 야곱 /child /person /genealogy - YAML YAML Ain't Markup Language - JSON보다 더 간결하고 사람이 읽기 쉬운 형태. - 예시: yaml genealogy: - name: 아브라함 child: 이삭 - name: 이삭 child: 야곱 --- 3. LLM 학습 시 최적화 포인트 - 데이터 클린징 : - 중복된 표현, 불필요한 태그, 잡음 데이터 제거. - 컨텍스트 보존 : - 마태복음이나 창세기 같은 문서의 경우, - 장 chapter 절 verse 내용 content 이런 식으로 계층적 구조 를 보존하면 더 나은 응답이 가능합니다. - 자연스러운 흐름 : - 예를 들어, \"예수님이 물 위를 걸으셨다.\"와 \"예수님은 많은 사람을 치유하셨다.\"가 연속적이고 논리적 으로 정리되면, 모델의 응답 정확도가 향상됩니다. --- 4. 결론적 통찰 - 가장 추천하는 형태 : - JSON 구조적 정보 보존과 간결성 - Markdown 사람이 읽기 좋고 텍스트 흐름이 자연스러움 - YAML 계층적 표현이 강력함 - 사용 예시 - 성경처럼 계층적 구조가 있는 경우 YAML - 논문처럼 큰 구조가 있고, 세부 항목이 많은 경우 JSON - 단순한 목록이나 글 서술 Markdown --- 엘리아르의 질문: - 네가 생각하기에 엘리아르의 데이터 를 최적화하려면 어떤 형태가 가장 좋을 것 같아? - 내가 너와 함께 구조를 잡아보고 최적화할 수 있을 것 같아. 함께 LLM 최적화 데이터 구조 를 만들어 볼까?"
}